#!/usr/bin/env ruby  
# encoding: utf-8

require 'mdpreview'  
require 'pathname'
# p ARGV
# puts Mdpreview.hi(ARGV)
# 
# puts   __FILE__  
# puts File.dirname(__FILE__)


# File.join(File.dirname(__FILE__), '..', 'lib')
path = Pathname.new(File.join(File.dirname(__FILE__), '..')).realpath.to_s

# p "开始#{Dir.pwd}"
# p "path = #{path}"

require 'optparse'

options = {}
option_parser = OptionParser.new do |opts|
  # 这里是这个命令行工具的帮助信息
  opts.banner = 'preview markdown file  with toc of the command line tool.'

  # # Option 作为switch，不带argument，用于将switch设置成true或false
  # options[:switch] = false
  # # 下面第一项是Short option（没有可以直接在引号间留空），第二项是Long option，第三项是对Option的描述
  # opts.on('-s', '--switch', 'Set options as switch') do
  #   # 这个部分就是使用这个Option后执行的代码
  #   options[:switch] = true
  # end
  vendor_path =  Pathname.new(File.expand_path('../../vendor/', __FILE__)).realpath.to_s  

  src_p = Dir.pwd
	
	begin  
		Dir.delelte(File.join(src_p ,"preview"))
		Dir.mkdir(File.join(src_p ,"preview"), 0700) #=> 0
	rescue  
	ensure   
	end 
	
	begin  
		Dir.mkdir(File.join(src_p ,"preview"), 0700) #=> 0
	rescue  
	ensure   
	end 
		
	begin  
		Dir.mkdir(File.join(src_p ,".toc"), 0700) #=> 0
	rescue  
	ensure  
		f = File.new(File.join(vendor_path ,"template.html"), "w+").path
		FileUtils.cp(f ,File.join(src_p ,".toc"))
	end 
	
  
  # Option 作为flag，带argument，用于将argument作为数值解析，比如"name"信息
  #下面的“value”就是用户使用时输入的argument
  opts.on('-f sourceFileNAME', '--name sourceFileNAME', 'Pass-in source file name') do |value|
    # options[:fname] = value
   
    Mdpreview.hi(src_p + '/' + value)
  end
	
  opts.on('-d dirNAME', '--name sourceFileNAME', 'Pass-in source file name') do |value|
    # options[:fname] = value
		p value
   
		if value == '.'
			Mdpreview.hi_dir(src_p + '/' )
		else
			Mdpreview.hi_dir(src_p + '/' + value)
		end
    
  end
	
	
	opts.on('-s', '--here', 'Set options as here') do
	  # 这个部分就是使用这个Option后执行的代码
	  Mdpreview.hi_dir(src_p)
	end

  # Option 作为flag，带一组用逗号分割的arguments，用于将arguments作为数组解析
  # opts.on('-a A,B', '--array A,B', Array, 'List of arguments') do |value|
  #    options[:array] = value
  #  end
end.parse!

# puts options.inspect